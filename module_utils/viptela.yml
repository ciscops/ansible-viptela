import os
from ansible.module_utils.basic import AnsibleModule, json, env_fallback
from ansible.module_utils.urls import fetch_url
from ansible.module_utils._text import to_native, to_bytes, to_text




def viptela_argument_spec():

    provider_spec = dict(host=dict(fallback=(env_fallback, ['VMANAGE_SERVER'])),
        host_port=dict(type='int', fallback=(env_fallback, ['F5_SERVER_PORT'])),
        user=dict(fallback=(env_fallback, ['VMANAGE_USER', 'ANSIBLE_USERNAME'])),
        password=dict(no_log=True,aliases=['pass', 'pwd'] fallback=(env_fallback, ['VMANAGE_PASSWORD', 'ANSIBLE_PASSWORD'])),
        validate_certs=dict(type='bool',fallback=(env_fallback, ['F5_VALIDATE_CERTS'])),
        timeout=dict(type='int'),
    }

    return dict(host=dict(type='str'),
        user=dict(type='str'),
        password=dict(type='str'),
        provider=dict(type='dict', options=provider_spec),
        validate_certs=dict(type='bool', required=False, default=False),
        timeout=dict(type='int', default=30)
    )


class viptelaModule(object):

    def __init__(self, module, username, password, function=None):
        self.module = module
        self.params = module.params
        self.result = dict(changed=False)
        self.headers = dict()
        self.function = function
        self.orgs = None
        self.nets = None
        self.org_id = None
        self.net_id = None

        # normal output
        self.existing = None

        # info output
        self.config = dict()
        self.original = None
        self.proposed = dict()
        self.merged = None

        # debug output
        self.filter_string = ''
        self.method = None
        self.path = None
        self.response = None
        self.status = None
        self.url = None
        self.params['force_basic_auth'] = True
        self.params['url_username'] = self.params['provider']['user']
        self.params['url_password'] = self.params['provider']['password']
        self.host = self.params['provider']['host']
        self.modifiable_methods = ['POST', 'PUT', 'DELETE']



        self.login(self.params['url_username'], self.params['url_password'])

        if function == 'vlan':
            self.headers = {'Content-Type': 'application/vnd.yang.data+json',
                            'Accept': 'application/vnd.yang.collection+json'}
        else:
            self.headers = {'Content-Type': 'application/vnd.yang.data+json',
                            'Accept': 'application/vnd.yang.data+json'}

    def login(self, username, password):
        url = '%s/j_security_check' % self.host
        data = 'j_username=%s&j_password=%s' % (username, password)
        headers = {'referer': self.get_base_url(),
                   'Content-Type': 'application/x-www-form-urlencoded',
                   'Accept': 'text/plain'}
        try:
            resp, info = fetch_url(module=self.module, url=url, data=data, headers=headers)
            status_code = info['status']
            if status_code not in [200, 201, 204]:
                self._fail('login', info['body'])

            self.headers = {'referer': self.get_base_url(),
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'Cookie': resp.info().getheader('Set-Cookie')}
        except Exception:
            e = get_exception()
            self._fail('login', str(e))


    def request(self, url, method=None, payload=None):
        """Generic HTTP method for viptela requests."""

        if method is not None:
            self.method = method
        # self.url = 'https://{host}/api/v0/{path}'.format(path=self.path.lstrip('/'), **self.params)
        self.url = url
        self.method = method
        self.payload = payload

        resp, info = fetch_url(self.module, self.url,
                               headers=self.headers,
                               data=payload,
                               method=self.method,
                               timeout=self.params['timeout'],
                               )
        self.response = info['msg']
        self.status = info['status']

        if self.status >= 300:
            try:
                self.fail_json(msg='Request failed for {url}: {status} - {msg}'.format(**info),
                                  body=json.loads(to_native(info['body'])))
            except Exception:
                pass

            self.fail_json(msg='Request failed for {url}: {status} - {msg}'.format(**info))

        try:
            return json.loads(to_native(resp.read()))
        except Exception:
            pass
        
    def exit_json(self, **kwargs):
        """Custom written method to exit from module."""
        self.result['response'] = self.response
        self.result['status'] = self.status
        self.result['url'] = self.url
        self.result['payload'] = self.payload
        self.result['method'] = self.method

        self.result.update(**kwargs)
        self.module.exit_json(**self.result)

    def fail_json(self, msg, **kwargs):
        """Custom written method to return info on failure."""
        self.result['response'] = self.response
        self.result['status'] = self.status
        self.result['url'] = self.url
        self.result['payload'] = self.payload
        self.result['method'] = self.method

        self.result.update(**kwargs)
        self.module.fail_json(msg=msg, **self.result)